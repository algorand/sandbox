version: '3'

networks:
  shared-network:
    driver: bridge

services:
  algod:
    container_name: "algorand-sandbox-algod"
    hostname: algod.server
    networks:
      - shared-network
    build:
      context: .
      dockerfile: ./images/algod/Dockerfile
      args:
        CHANNEL: "${ALGOD_CHANNEL}"
        URL: "${ALGOD_URL}"
        BRANCH: "${ALGOD_BRANCH}"
        SHA: "${ALGOD_SHA}"
        BOOTSTRAP_URL: "${NETWORK_BOOTSTRAP_URL}"
        GENESIS_FILE: "${NETWORK_GENESIS_FILE}"
        TEMPLATE: "${NETWORK_TEMPLATE:-images/algod/template.json}"
        TOKEN: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        ALGOD_PORT: "4001"
        KMD_PORT: "4002"
        CDT_PORT: "9392"
    ports:
      - 4001:4001
      - 4002:4002
      - 9392:9392

  indexer:
    container_name: "algorand-sandbox-indexer"
    hostname: indexer.server
    networks:
      - shared-network
    build:
      context: .
      dockerfile: ./images/indexer/Dockerfile
      args:
        URL: "${INDEXER_URL}"
        BRANCH: "${INDEXER_BRANCH}"
        SHA: "${INDEXER_SHA}"
    ports:
      - 8980:8980
    restart: unless-stopped
    environment:
      DISABLED: "${INDEXER_DISABLED}"
      PORT: "8980"
      SNAPSHOT: ""
      CONNECTION_STRING: "host=indexer-db port=5432 user=algorand password=algorand dbname=indexer_db sslmode=disable"
      ALGOD_ADDR: "algod:4001"
      ALGOD_TOKEN: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    depends_on:
      - indexer-db
      - algod

  indexer-db:
    image: "postgres:13-alpine"
    container_name: "algorand-sandbox-postgres"
    networks:
      - shared-network
    ports:
      - 5433:5432
    user: postgres
    environment:
      POSTGRES_USER: algorand
      POSTGRES_PASSWORD: algorand
      POSTGRES_DB: indexer_db

  zipkin:
    container_name: zipkin
    networks:
      - shared-network
    #    image: openzipkin/zipkin:2.21
    image: openzipkin/zipkin
    ports:
      - 9411:9411

  algosearch:
    container_name: "algorand-sandbox-algosearch"
    hostname: algosearch
    networks:
      - shared-network
    image: algosearch:1.1
    ports:
      - 5000:5000 # CRUD API
      - 4000:4000 # DEBUG API
      - 3000:3000 # Frontend
      - 3001:3001 # EXPVAR API
      - 3002:3002 # Metric DEBUG API
    environment:
      ALGOSEARCH_BACKEBD_DISABLED: "${ALGOSEARCH_DISABLED}"
      ALGOSEARCH_METRICS_DISABLED: "${ALGOSEARCH_DISABLED}"
      ALGOSEARCH_FRONTEND_DISABLED: "${ALGOSEARCH_DISABLED}"
      ALGOSEARCH_WEB_ENABLE_SYNC: "true"
      ALGOSEARCH_WEB_SYNC_INTERNAL: "5s"
      ALGOSEARCH_COUCH_DB_INIT: "true"
      ALGOSEARCH_COUCH_DB_MIGRATE: "true"
      ALGOSEARCH_COUCH_DB_PROTOCOL: "http"
      ALGOSEARCH_COUCH_DB_HOST: "algosearch-db:5984"
      ALGOSEARCH_COUCH_DB_USER: "algorand"
      ALGOSEARCH_COUCH_DB_PASSWORD: "algorand"
      ALGOSEARCH_COUCH_DB_NAME: "sandbox"
      ALGOSEARCH_ALGOD_PROTOCOL: "http"
      ALGOSEARCH_ALGOD_ADDR: "algod:4001"
      ALGOSEARCH_ALGOD_TOKEN: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
#      ALGOSEARCH_INDEXER_ADDR: "http://indexer:8980"
#      ALGOSEARCH_INDEXER_TOKEN: ""
#      ALGOSEARCH_INDEXER_ADDR: "algod:4001"
#      ALGOSEARCH_INDEXER_TOKEN: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      ALGOSEARCH_ZIPKIN_REPORTER_URI: "http://zipkin:9411/api/v2/spans"
      NEXT_PUBLIC_API_URL: "http://localhost:5000"
      METRICS_COLLECT_FROM: "http://algosearch:4000/debug/vars"
    depends_on:
      - zipkin
      - algosearch-db
      - indexer
      - algod

  algosearch-db:
    image: couchdb:3.2.0
    container_name: "algorand-sandbox-couchdb"
    hostname: couchdb.server
    networks:
      - shared-network
    ports:
      - 5984:5984
    # Optional
    # volumes:
    #   - ./db-data:/opt/couchdb/data
    # extra_hosts:
    #   - "dockerhost:$DOCKERHOST"
    # https://github.com/apache/couchdb-docker/issues/55
#    command: curl -u admin:password -X PUT 128.0.0.1:5984/_users && curl -u admin:password -X PUT 127.0.0.1:5984/test
    # command: curl -u algorand:algorand -X PUT http://128.0.0.1:5984/_users && curl -u algorand:algorand -X PUT http://127.0.0.1:5984/algo_global
    environment:
      - COUCHDB_USER=algorand
      - COUCHDB_PASSWORD=algorand
