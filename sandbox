#!/usr/bin/env bash
set -euo pipefail

# Compatibility with Windows / MSYS2
# 1. Use // to prevent msys to convert to Windows PATH on Windows
#   when using inside Docker
#   see http://www.mingw.org/wiki/Posix_path_conversion
# 2. Use $PTY_DOCKER for all commands that require a PTY (-t)
PTY_DOCKER=docker
if [ "$(uname)" == "Darwin" ]; then
  true
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ] || \
     [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
  PTY_DOCKER="winpty docker"
fi

red=`echo -en "\e[31m"`
green=`echo -en "\e[32m"`
default=`echo -en "\e[39m"`
SNAPSHOT_URL_PREFIX="https://algorand-snapshots.s3.us-east-1.amazonaws.com/network"
SNAPSHOT_MAINNET_URL=$SNAPSHOT_URL_PREFIX/"mainnet-v1.0/latest.tar.gz"
SNAPSHOT_TESTNET_URL=$SNAPSHOT_URL_PREFIX/"testnet-v1.0/latest.tar.gz"
SNAPSHOT_BETANET_URL=$SNAPSHOT_URL_PREFIX/"betanet-v1.0/latest.tar.gz"

function printc () {
  printf "$1$2${default}\n"
}

function statusline () {
  printf "${green}$1${default}\n"
}

function err () {
  printf "${red}$1${default}\n"
}

function ask_clean () {
  if ask "$1"; then
    clean
  else
    exit 1
  fi
}

function ask () {
    # https://djm.me/ask
    local prompt default reply

    if [ "${2:-}" = "Y" ]; then
        prompt="Y/n"
        default=Y
    elif [ "${2:-}" = "N" ]; then
        prompt="y/N"
        default=N
    else
        prompt="y/n"
        default=
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}


if ! [ -x "$(command -v docker)" ]; then
  err 'Error: docker is not installed.' >&2
  exit 1
fi

# Not using docker-compose at the moment
#if ! [ -x "$(command -v docker-compose)" ]; then
#  echo 'Error: docker-compose is not installed.' >&2
#  exit 1
#fi

# Global flags
USE_SNAPSHOT=1

sandbox () {
  status () {
    $PTY_DOCKER exec -it sandbox goal node status
  }

  clean () {
    statusline "Stopping running container..."
    docker kill sandbox > /dev/null 2>&1 || true

    statusline "Stopping and removing running sandbox container..."
    docker rm sandbox > /dev/null 2>&1 || true
    docker rmi $(docker images --filter=reference=algorand-sandbox -q) > /dev/null 2>&1 || true
    docker rmi $(docker images -f "dangling=true" -q) > /dev/null 2>&1 || true
    docker volume ls | grep -q algorand-sandbox-data && docker volume rm algorand-sandbox-data || true

    statusline "Removing algorand sandbox data..."
    rm -rf data
  }

  # Enter attaches users to a shell in the desired container
  enter () {
    statusline "Entering /bin/bash session in the sandbox container..."
    $PTY_DOCKER exec -w //opt/algorand/node -it sandbox //bin/bash
  }

  # Logs streams the logs from the container to the shell
  logs () {
    if [[ $# -gt 1 && $2 == "raw" ]]; then
      $PTY_DOCKER exec -it sandbox tail -f //opt/algorand/node/data/node.log
    else
      $PTY_DOCKER exec -it sandbox carpenter -D
    fi
  }

  # Start the algorand node
  up () {
    # Set default to testnet case a network wasn't provided
    NETWORK=${2:-testnet}

    case $NETWORK in
      mainnet)
        CHANNEL=stable
        GENESIS_VERSION=mainnet-v1.0
        CONFIG=config.json
        SNAPSHOT_URL=$SNAPSHOT_MAINNET_URL
        ;;
      testnet)
        CHANNEL=stable
        GENESIS_VERSION=testnet-v1.0
        CONFIG=config.json
        SNAPSHOT_URL=$SNAPSHOT_TESTNET_URL
        ;;
      betanet)
        CHANNEL=beta
        GENESIS_VERSION=betanet-v1.0
        CONFIG=beta.config.json
        SNAPSHOT_URL=$SNAPSHOT_BETANET_URL
        ;;
      *)
        err "Invalid network '$2', use one of ['mainnet', 'testnet', 'betanet']."
        exit 1
        ;;
    esac

    # Validate/repair data directory
    if [[ -d data ]]; then
      if [[ ! -f data/network ]]; then
        err "Detected a corrupt data directory..."
        ask_clean "Would you like to remove it and continue?"
      elif [[ $# -gt 1 && -f data/network && "$(cat data/network)" != $2 && "$(docker ps -a --filter name=sandbox -q)" ]]; then
        err "The sandbox is already configured to run '$(cat data/network)'."
        ask_clean "Would you like to reset the sandbox to run '$2'?"
      fi
    fi

    # Resume or initialize sandbox
    if [[ -d data ]]; then
      statusline "Starting the existing sandbox..."
      set +e
      docker start sandbox > /dev/null

      if [[ $? -ne 0 ]]; then
        err "Detected an error from the docker command."
        if [[ $# -eq 0 ]]; then
          NETWORK=$(cat data/network)
        fi
        ask_clean "Would you like to reset the sandbox and try again?"
        statusline "Starting '$NETWORK' sandbox..."
        up $NETWORK
      fi
      set -e
    else
      statusline "\nBuilding a new Docker Image..."
      docker build \
        --build-arg channel=$CHANNEL \
        -t \
        algorand-sandbox:$CHANNEL \
        . \
        -f images/Dockerfile
        
      # Create a new data directory
      if [ ! -d data ]; then
        statusline "Initializing data directory for $NETWORK..."

        if [[ $USE_SNAPSHOT == 1 ]]; then
          if [[ ${SNAPSHOT_URL:=""} == "" || ${GENESIS_VERSION:=""} == "" ]]; then
            err "A snapshot is not available for $NETWORK."
          else
            statusline "\nDownloading $NETWORK snapshot..."
            rm -f latest.tar.gz
            curl -s -S $SNAPSHOT_URL -o latest.tar.gz
            mkdir -p data/${GENESIS_VERSION}
            tar xvf latest.tar.gz -C data/${GENESIS_VERSION}
            rm latest.tar.gz
          fi
        fi

        mkdir -p data/kmd-v0.5
        cp config/$CONFIG data/config.json
        cp config/token data/algod.token
        cp config/kmd_config.json data/kmd-v0.5
        cp config/token data/kmd-v0.5/kmd.token
        chmod 700 data/kmd-v0.5
        cp genesis/${NETWORK}/genesis.json data

        # Copy to the Docker container
        tar -cf - data | docker run --name sandbox \
          --mount source="algorand-sandbox-data",target=//opt/algorand/node/data \
          --entrypoint="" \
          -i \
          algorand-sandbox:$CHANNEL \
          tar -C //opt/algorand/node -x
        docker rm sandbox

        # Remember the used network
        echo "$NETWORK" > data/network
      fi

      statusline "\nStarting a new Docker Container..."
      docker run \
        -p 4001:4001 \
        -p 4002:4002 \
        --name sandbox \
        --mount source="algorand-sandbox-data",target=//opt/algorand/node/data \
        -d \
        algorand-sandbox:$CHANNEL

      statusline "\nSandbox started! Printing status..."
      sleep 1
      status
    fi
  }

  help () {
      cat <<-EOF
sandbox commands:
  up [mainnet||testnet||betanet] [-s||--skip-snapshot]
          -> spin up the sandbox environment, uses testnet by default.
             Optionally provide -s to skip initializing with a snapshot.
  down    -> tear down the sandbox environment
  restart -> restart the sandbox
  enter   -> enter the sandbox container
  clean   -> stops and deletes containers and data directory
  test    -> runs some tests to make sure everything is working correctly

algorand commands:
  logs        -> stream algorand logs with the carpenter utility
  status      -> get node status
  goal (args) -> run goal command like 'goal node status'
  dryrun (tx) -> run 'goal clerk dryrun -t tx' to test a transaction file

tutorials:
  introduction -> learn how to get Algos on testnet and create a transaction

EOF
  }

  if [ $# -eq 0 ]; then
    help
    exit 1
  fi

  case $1 in
    up)
      up "$@"
      ;;

    down)
      statusline "Stopping sandbox container..."
      docker kill sandbox > /dev/null
      ;;

    restart)
      statusline "Restarting sandbox process..."
      docker restart sandbox
      ;;

    clean)
      clean
      ;;

    test)
      printc $red "Test command forwarding..."
      printc $default "~$ ${green}docker exec -it sandbox uname -a"
      docker exec -it sandbox uname -a

      printc $red "\nTest algod..."
      printc $default "~$ ${green}docker exec -it sandbox /opt/algorand/node/goal node status -d /opt/algorand/node/data"
      status

      printc $red "\nTest Algod REST API..."
      printc $default "~$ ${green}curl localhost:4001/v1/status -H \"X-Algo-API-Token: \$(cat data/algod.token)\""
      curl localhost:4001/v1/status -H "X-Algo-API-Token: $(cat data/algod.token)"

      printc $red "\nTest KMD REST API..."
      printc $default "~$ ${green}curl localhost:4002/v1/wallets -H \"X-KMD-API-Token: \$(cat data/kmd-v0.5/kmd.token)\""
      curl localhost:4002/v1/wallets -H "X-KMD-API-Token: $(cat data/kmd-v0.5/kmd.token)"

      printf "\n\n"
      ;;

    enter)
      enter "$@"
      ;;

    logs)
      logs "$@"
      ;;

    status)
      status
      ;;

    goal)
      shift
      $PTY_DOCKER exec -w //opt/algorand/node/data -it sandbox goal "$@"
      ;;

    dryrun)
      shift
      cp $1 data
      $PTY_DOCKER exec -w //opt/algorand/node/data -it sandbox goal clerk dryrun -t "$(basename $1)"
      ;;

    introduction)
      ./utils/transaction.sh
      ;;

    *)
      help
      ;;
  esac
}

PARAMS=()
while (( "$#" )); do
  case "$1" in
    -s|--skip-snapshot)
      USE_SNAPSHOT=0
      shift
      ;;
    *) # preserve positional arguments
      PARAMS+=("$1")
      shift
      ;;
  esac
done

pushd `dirname $0` > /dev/null
sandbox "${PARAMS[@]}"
popd > /dev/null
